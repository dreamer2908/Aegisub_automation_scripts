
== Introduction ==

I wrote/am writing/will write some automation scripts for Aegisub, and I just put them here. They might be useful, useless, or even dangerous, depending on my mood and what crazy idea I have in mind. These scripts are not guaranteed not only to work and produce something useful, but also to not blow your Aegisub, kill your cat, or make your girlfriend dump you, etc. Use them at your own risk; you have been warned. Huehuehue~

Oh right, most should have "drm_" as prefix just to reduce the level of messiness in your autoload folder.

== ASS Color Matrix Converter ==

Long long ago, before the first hu— Err, not that old. Before the age of high-definition media, most video files are BT.601-compliant standard-defination. vsfilter also used matrix coefficients defined in BT.601 standard to convert colors in ASS subtitles, which is either BGR or ABGR with 8-bit per channel, into YUV, which most renderers use. At the same time, libass used BT.601 to deal with both SD videos and ASS subtitles, too. And Aegisub's decoder, too, used BT.601 to decode SD videos to computer RGB. Life was good as everyone worked in the same way. 

However, goodness never lasts: here came the HD era and its new standard—BT.709. BT.709 itself is an improvement and good, as it allows higher both spatial and temporary resolution, and a lot more colors, which are forbidden in BT.601. ffms2, Aegisub's decoder, started using BT.709 to decode HD video; that's correct. libass-based video player like mplayer also started to do the same, and also use BT.709 to deal with ASS subtitles; that's also correct. Life was good as everyone worked in— Err, I forgot someone. Oh right, it's vsfilter. vsfilter, unfortunately, used and only used BT.601 to render subtitles. If you have Aegisub and ffms2 decode the video *correctly* with BT.709, make a subtitle normally, and then give the result to vsfilter, it will display the subtitle—its color—incorrectly; red now becomes orange, for example. That was a mess. But here we went a bigger mess: to deal with vsfilter's incompetence, people came up the following "solution", which I call a dirty hack: forcing ffms2 to decode all videos with BT.601, and creating subtitles in that weird environment—Yes, displaying the video incorrectly and working on it—so that colors would match on playback with vsfilter. This "solution" makes libass look wrong even though libass *is* the one doing right. If you're using Aegisub 3.0.x and haven't touched any settings marked as "advanced", yes, unfortunately, you're using this "solution".

As the time went by, a new subtitle render appeared: xy-vsfilter—Well, it's not actually new, but just ignore it. It's much faster than both vsfilter and libass, supports BT.709 the new standard, and introduces a new field (flag): YCbCr Matrix. As long as the creator flags the subtitle correctly, the subtitle renderer can display the subtile the same way as how it was created. If you create the subtitle in BT.601, it will be displayed in BT.601; if you create it in BT.709, it will be displayed in BT.709. And the brilliant upcomming mpv, which uses libass, also supports this flag.

Now we can finally do thing in the way it's supposed to be, right? Who cares about those leechers who's still using some ridiculously old piece of software from the Stone Age?

Oh, don't bother to read the above paragraphs, btw. It's not like you need to know about the past.

This script can be used to adjust colors specified in subtitles so that ones made with matrix BT.601 can fit it scripts made with matrix BT.709 and vice versa. You can also use it adapt the existing subtitles to the correct working environment. In other words, it converts the color matrix used in subtitles.

Usage: Copy it to your autoload folder. The macro's name is "Color Matrix Converter". Select conversion mode ("BT.601 to BT.709" or "BT.709 to BT.601"); whether you want to convert selected lines, styles, or everything; and whether you want it to set the YCbCr Matrix field for you. Click OK; that's all. These selections are retained until Aegisub closes.

Users of Aegisub 2.* and 3.0.* should use the lua version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_ass_color_matrix_converter.lua drm_ass_color_matrix_converter.lua]), and users of version 3.1 or later should use the moonscript version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_ass_color_matrix_converter.moon drm_ass_color_matrix_converter.moon]) — the main version. In case you want to convert the whole file (or several files), you should use [https://www.dropbox.com/s/n02xbdo904h1cw7/ASSColorMatrixConverter_beta9.7z the C# version] as it's much faster, more reliable and supports batch processing. Lua/Moonscript version is just a little more handy.

== Template-based Typesetting Tool ==

This script is written to save time when typesetting several similar signs. You can just create a template, time the signs, and then apply it to them; that's all. Using this to keep consistent between several scripts or massively modifying lines is fine, too.

=== Usage ===

Open the "Template manager" and add a (bunch of) new template(s). Select some lines, click Automation/Apply a template, choose one template from the list(s), and click "OK" to apply. That's all.

In older version, you must type out everytime you need to create a template, but now you can use "New template" dialog to add new templates. That saves some keystrokes and lets you be a bit more lazy. You can also create templates automatically from subtitles: Just make one line of what you will feed to the script, and some lines of what you want it to produce; press some buttons; and baang! You get a template! 

Note: "New template" dialog only shows 5 lines of the template by default (chosen by me). Change <code>linesPerPageLimit = 5</code> to something else if you don't like my decision. Use "Next page" button to navigate between pages.

For other operations like removing/changing/etc. templates, you should edit the configuration manually. I find this more convinient; deal with it if you don't feel the same.

As usual, users of Aegisub 2.* and 3.0.* should use the lua version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_template_based_typesetting.lua drm_template_based_typesetting.lua]), and users of version 3.1 or later should use the moonscript version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_template_based_typesetting.moon drm_template_based_typesetting.moon]) — the main version. There's no reason to typeset in 2.*, but compatibility doesn't hurt (much) so I just keep it.

=== Configuration file location ===

The configuration file is supposed to be stored in automation/autoload folder; same for this script. All templates and settings are stored there.

If you want it to be somewhere else, change <code>absolutePath = false</code> to <code>absolutePath = true</code>, AND replace <code>drm_template_based_typesetting.conf</code> with any *absolute* path you want. Note that on Windows system, you must use <code>\\</code> (two slash) instead of <code>\</code> (one slash); that is, use <code>D:\\random\\folder\\template.conf</code> instead of <code>D:\random\folder\template.conf</code>. If you're on Linux/Unix, a normal path like <code>/home/me/Desktop/fagging/template.conf</code> works just fine.

In Aegisub 3.0+ and 2.1.9 WIN32 PORTABLE ([https://dl.dropboxusercontent.com/u/35211112/tools/Aegisub-2.1.9-mod-rev5-latest-xy.7z this one] to be precise), path decoding should work and get the correct path. If you're using something else, you MUST set an absolute path as guided above. This script won't work properly without a configuration file with full read/write access.

=== Configuration file format ===

In the configuration file, setting lines start with "$", and template lines start with "#". Everything else is ignored. Invalid setting/template lines are also ignored.

Setting lines are in the following format: <code>$variable=value</code>. Only <code>activeSet</code> is used at the moment.

Template lines are in the following format: <code>#set_name,template_name,layer,start_time_offset,end_time_offset,style_name,margin_left,margin_right,margin_top,margin_bottom,tags_to_add</code>

Each template line defines a line of your typeset template — or call it whatever you want. If the template consists of several layers/lines, put each one in a separated line.

<code>set_name</code>, <code>template_name</code>, and <code>style_name</code> are strings, and must NOT contain any comma — ASS format also doesn't allow comma in style name.

<code>layer</code> is a number. Put a normal number there if you want to set the layer to a certain layer; put +num or -num if you want it to be num layers lower/higher than the layer set int the original line (offset mode). In sample "Increase layer by 10", it's +10 — The name is clear enough, right? From version 0.1.5, you can leave out <code>layer</code> to keep the original layer. For example, you can use <code>#set2,{\an8},,0,0,,,,,,{\an8}{*bestest* typeset}</code> instead of <code>#set2,{\an8},+0,0,0,,+0,+0,+0,+0,{\an8}{*bestest* typeset}</code> now

Similar for <code>margin_left</code>, <code>margin_right</code>, <code>margin_top</code>, <code>margin_bottom</code>. Note that in offset mode, if margin_* is 0, the margin_* is taken from the (original) style. It's the correct behaviour.

<code>start_time_offset</code>, and <code>end_time_offset</code> define the amount of centi-seconds you want to add/remove from the line. In most cases, you would use 0 and 0.

<code>style_name</code> is the name of the style you want the line to use. If it's empty, the original style of the line is kept.

<code>tags_to_add</code> is whatever you want to append to the beginning of the text. It can be some tags, text, comment, etc.

You can group templates by set. The active set is determined by <code>currentSet</code>. In 0.1.4 or later, you can have several active sets at the same time; just separate each set name with a comma.

=== Sample templates ===

Let's look at a few sample:

<code>#set2,Increase layer by 10,+10,0,0,,,,,,</code>

This template does what its name says. Layer +10 increases the layer of the line by 10. The rest is kept: time offset 0,0 keeps the original timing, empty style name keeps the style, and margins "empty" keep the margins (-0 or +0 also works).

<code>#set2,Increase margin,,0,0,,+20,+100,+100,+50,</code>

This keeps the timing, style, and layers, while increases the margins. I don't think anyone would do something like this, though.

<code>
#set1,Nase Mitsuki,1,0,0,Signs,0,0,0,0,{\pos(830,600)\fad(0,400)\alpha&HFF&\t(0,1200,2,\alpha&H00&)\c&HC840B1&\fscx101\fscy100\blur4\bord1.1\3c&HFFFFFF&}

#set1,Nase Mitsuki,0,0,0,Signs,0,0,0,0,{\pos(830,600)\fad(0,400)\alpha&HFF&\t(0,1200,2,\alpha&H00&)\c&HC840B1&\fscx101\fscy100\blur0.5\3c&HFFFFFF&}
</code>

This template has two layers: 
*Layer 1: Timing and margins are kept, layer is changed to 1, style is changed to "Signs", and a few tags are added to the beginning of the text.
*Layer 2: You can guess.

<code>#set2,{\an8},,0,0,,,,,,{\an8}{*bestest* typeset}</code>

This adds {\an8} and a glorious comment to the line; everything else is unchanged.

Yeah, you can do a lot with this script.

A sample configuration file is provided here: [https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/samples/drm_template_based_typesetting.conf drm_template_based_typesetting.conf]. There're two sets of templates, and both are set to be active.

=== Important note ===

Don't be lazy, seriously!


== Switch between styles ==

This script is written for switching lines between styles without breaking it, by copying the properties which are different between the old and new style. It might be useful to reduce the number of styles.

Current lazy implement doesn't check the line for properties that get overriden by tags (and so don't need copying); you can always use "Clean Tags" script, which is included in Aegisub, to clean up.

If you want to ignore some difference between styles, that is, to skip copying some properties, go to <code>ignoreList</code> part and change <code>false</code> to <code>true</code> for the one you want.

As usual, users of Aegisub 2.* and 3.0.* should use the lua version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_switch_between_styles.lua drm_switch_between_styles.lua]), and users of version 3.1 or later should use the moonscript version ([https://raw.github.com/dreamer2908/Aegisub_automation_scripts/master/drm_switch_between_styles.moon drm_switch_between_styles.moon]) — the main version. 

== Goodbye* ==